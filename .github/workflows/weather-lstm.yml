name: Weather LSTM Training and Prediction

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'weather-lstm/**'
      - '.github/workflows/weather-lstm.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'weather-lstm/**'
      - '.github/workflows/weather-lstm.yml'
  schedule:
    # Run every 3 hours
    - cron: '0 */3 * * *'
  workflow_dispatch:
    inputs:
      epochs:
        description: 'Number of training epochs'
        required: false
        default: '50'
      days:
        description: 'Days of historical data to use'
        required: false
        default: '30'

defaults:
  run:
    working-directory: weather-lstm

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc make jq
        
        # Install GitHub CLI for more reliable artifact downloads
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y
    
    - name: Create necessary directories
      run: |
        mkdir -p data models bin obj
    
    - name: Make scripts executable
      run: |
        chmod +x scripts/*.py scripts/*.sh
    
    - name: Download previous artifacts
      continue-on-error: true
      run: |
        echo "üîÑ Attempting to download previous run artifacts..."
        
        # Get repository info from environment
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        
        echo "Repository: $REPO_OWNER/$REPO_NAME"
        
        # Method 1: Use GitHub CLI to download artifacts if available
        if command -v gh >/dev/null 2>&1; then
          echo "üì¶ Method 1: Using GitHub CLI to download artifacts..."
          
          # Set up GitHub CLI authentication
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token 2>/dev/null
          
          # Try to download the latest weather-lstm-artifacts
          echo "üîç Looking for successful workflow runs..."
          LATEST_RUN_ID=$(gh run list --repo "$REPO_OWNER/$REPO_NAME" --workflow="weather-lstm.yml" --status="success" --limit=10 --json databaseId,conclusion,status,createdAt | \
             jq -r '.[] | select(.conclusion == "success") | .databaseId' | head -1)
          
          if [ -n "$LATEST_RUN_ID" ]; then
            echo "üì¶ Found successful run: $LATEST_RUN_ID"
            echo "‚¨áÔ∏è  Attempting to download artifacts..."
            
            if gh run download "$LATEST_RUN_ID" --repo "$REPO_OWNER/$REPO_NAME" --name "weather-lstm-artifacts" --dir . 2>/dev/null; then
              echo "‚úÖ Successfully downloaded previous artifacts using GitHub CLI"
              echo "Contents of models directory:"
              ls -la models/ 2>/dev/null || echo "No previous models found"
              echo "Contents of data directory:"
              ls -la data/ 2>/dev/null || echo "No previous data found"
            else
              echo "‚ö†Ô∏è  GitHub CLI download failed"
            fi
          else
            echo "‚ÑπÔ∏è  No successful runs found"
          fi
        fi
        
        # Method 2: If GitHub CLI failed or not available, try simple curl-based download
        if [ ! -d "models" ] || [ -z "$(ls -A models 2>/dev/null)" ]; then
          echo ""
          echo "üì¶ Method 2: Using simple curl-based download..."
          chmod +x scripts/simple_artifact_download.sh
          ./scripts/simple_artifact_download.sh "$REPO_OWNER" "$REPO_NAME" "${{ secrets.GITHUB_TOKEN }}" "weather-lstm-artifacts" || echo "Simple download failed"
        fi
        
        # Method 3: If still no artifacts, try Python script
        if [ ! -d "models" ] || [ -z "$(ls -A models 2>/dev/null)" ]; then
          echo ""
          echo "üì¶ Method 3: Using Python script..."
          python3 scripts/download_artifacts.py \
            --owner "$REPO_OWNER" \
            --repo "$REPO_NAME" \
            --token "${{ secrets.GITHUB_TOKEN }}" \
            --output-dir "." \
            --artifact-name "weather-lstm-artifacts" || echo "Python script failed"
        fi
        
        # Show what we have after all download attempts
        echo ""
        echo "üìÇ Final state after all artifact download attempts:"
        echo "Models:" && ls -la models/ 2>/dev/null || echo "  No models directory"
        echo "Data:" && ls -la data/ 2>/dev/null || echo "  No data directory"
        
        # Always succeed this step - artifact download is optional
        echo ""
        echo "üîÑ Artifact download step completed (success or graceful failure)"
        echo "‚ÑπÔ∏è  If no artifacts were found, this is normal for the first run"

    - name: Fetch weather data
      run: |
        echo "üå§Ô∏è Fetching weather data from NOAA API..."
        DAYS="${{ github.event.inputs.days || '30' }}"
        
        # Test NOAA API connectivity first
        echo "üîó Testing NOAA API connectivity..."
        if curl -s --connect-timeout 10 --max-time 30 "https://api.weather.gov" > /dev/null; then
          echo "‚úÖ NOAA API is reachable"
        else
          echo "‚ùå NOAA API is not reachable - check internet connectivity"
          exit 1
        fi
        
        # Try NOAA API first with incremental updates
        echo "üì° Fetching historical data from NOAA station KMSP..."
        if python3 scripts/fetch_noaa_weather.py --station KMSP --days $DAYS --incremental --output data/historical_data.csv; then
          echo "‚úÖ Successfully fetched/updated NOAA weather data"
          
          # Check if we have enough data points for training
          if [ -f "data/historical_data.csv" ]; then
            TRAINING_POINTS=$(($(wc -l < data/historical_data.csv) - 1))
            echo "üìä NOAA provided $TRAINING_POINTS data points"
            
            if [ $TRAINING_POINTS -lt 5 ]; then
              echo "‚ùå NOAA data insufficient ($TRAINING_POINTS points) - need at least 5 for basic training"
              echo "üîç Troubleshooting:"
              echo "  - Check if KMSP station is operational"
              echo "  - Try increasing --days parameter"
              echo "  - Check data/historical_data.csv for content"
              ls -la data/historical_data.csv 2>/dev/null || echo "  - File does not exist"
              head -n 5 data/historical_data.csv 2>/dev/null || echo "  - Cannot read file"
              exit 1
            elif [ $TRAINING_POINTS -lt 10 ]; then
              echo "‚ö†Ô∏è  NOAA data limited ($TRAINING_POINTS points) - training may be constrained"
              echo "üìä Minimum recommended: 10+ data points for reliable training"
              echo "üîÑ Will proceed with available data using adaptive model parameters"
            else
              echo "‚úÖ Sufficient NOAA data for robust training ($TRAINING_POINTS points)"
            fi
          else
            echo "‚ùå Historical data file was not created"
            exit 1
          fi
        else
          echo "‚ùå NOAA historical data fetch failed"
          echo "üîç Troubleshooting:"
          echo "  - NOAA API may be temporarily unavailable"
          echo "  - Station KMSP may be down for maintenance"
          echo "  - Network connectivity issues"
          echo "  - Rate limiting from API"
          
          # Try to get station info for debugging
          echo "üîß Attempting to get station info for debugging..."
          python3 scripts/fetch_noaa_weather.py --station KMSP --info || echo "Station info also failed"
          
          exit 1
        fi

        # Fetch recent data for testing (always fresh for testing)
        echo "üì° Fetching recent data for prediction testing..."
        if python3 scripts/fetch_noaa_weather.py --station KMSP --recent --output data/recent_weather.csv; then
          echo "‚úÖ Successfully fetched real NOAA recent data"
          
          if [ -f "data/recent_weather.csv" ]; then
            RECENT_POINTS=$(($(wc -l < data/recent_weather.csv) - 1))
            echo "üìä Recent data points: $RECENT_POINTS"
            
            if [ $RECENT_POINTS -lt 1 ]; then
              echo "‚ö†Ô∏è  Very limited recent data ($RECENT_POINTS points) - prediction testing will be minimal"
            fi
          fi
        else
          echo "‚ùå NOAA recent fetch failed"
          echo "üîç This may not be critical if historical data is sufficient"
          echo "üìù Creating minimal recent data file for testing..."
          
          # Create a minimal recent data file from historical data if available
          if [ -f "data/historical_data.csv" ] && [ $TRAINING_POINTS -gt 0 ]; then
            echo "üîÑ Using last historical data point as recent data..."
            head -n 1 data/historical_data.csv > data/recent_weather.csv
            tail -n 1 data/historical_data.csv >> data/recent_weather.csv
            echo "‚úÖ Created fallback recent data file"
          else
            echo "‚ùå Cannot create fallback recent data - no historical data available"
            exit 1
          fi
        fi
        
        echo ""
        echo "üéâ Weather data fetching completed"
        echo "üìÅ Data files summary:"
        ls -la data/
    
    - name: Build C programs
      run: |
        echo "Building Weather LSTM programs..."
        make all
        echo "Build completed successfully"
        ls -la bin/
    
    - name: Validate data
      run: |
        echo "Validating weather data..."
        # Check if data files exist and have content
        if [ ! -f "data/historical_data.csv" ]; then
          echo "Error: historical_data.csv not found"
          exit 1
        fi
        
        if [ ! -f "data/recent_weather.csv" ]; then
          echo "Error: recent_weather.csv not found"
          exit 1
        fi
        
        # Count data points (subtract 1 for header)
        TRAINING_POINTS=$(($(wc -l < data/historical_data.csv) - 1))
        RECENT_POINTS=$(($(wc -l < data/recent_weather.csv) - 1))
        
        echo "Training data points: $TRAINING_POINTS"
        echo "Recent data points: $RECENT_POINTS"
        
        # More flexible requirements for real NOAA data
        if [ $TRAINING_POINTS -lt 5 ]; then
          echo "Error: Insufficient training data (need at least 5 points for basic LSTM)"
          exit 1
        elif [ $TRAINING_POINTS -lt 10 ]; then
          echo "‚ö†Ô∏è  Warning: Limited training data ($TRAINING_POINTS points) - model accuracy may be reduced"
        fi
        
        if [ $RECENT_POINTS -lt 1 ]; then
          echo "Error: No recent data available for testing"
          exit 1
        elif [ $RECENT_POINTS -lt 2 ]; then
          echo "‚ö†Ô∏è  Warning: Very limited recent data ($RECENT_POINTS points) - prediction testing will be basic"
        fi
        
        # Show sample data
        echo "Sample training data:"
        head -n 3 data/historical_data.csv
        
        echo "Sample recent data:"
        head -n 3 data/recent_weather.csv
    
    - name: Train LSTM model
      run: |
        echo "üß† Training LSTM model..."
        EPOCHS="${{ github.event.inputs.epochs || '50' }}"
        
        # Determine model continuation strategy
        PREVIOUS_MODEL=""
        OUTPUT_MODEL="models/weather_model.bin"
        TRAINING_MODE="new"
        
        # Check for any existing model to continue from
        if [ -f "models/weather_model.bin" ]; then
          PREVIOUS_MODEL="models/weather_model.bin"
          TRAINING_MODE="continue"
        elif [ -f "models/continued_model.bin" ]; then
          PREVIOUS_MODEL="models/continued_model.bin"
          OUTPUT_MODEL="models/weather_model.bin"  # Standardize output name
          TRAINING_MODE="continue"
        fi
        
        if [ "$TRAINING_MODE" = "continue" ]; then
          echo "üîÑ Continuing training from existing model: $PREVIOUS_MODEL"
          echo "üìä Previous model will be updated with $EPOCHS additional epochs"
          # For now, we train a new model since incremental training isn't fully implemented
          # In future versions, this would load the existing weights and continue training
        else
          echo "üÜï Training new model from scratch with $EPOCHS epochs"
        fi
        
        # Adjust model parameters based on available data
        TRAINING_POINTS=$(($(wc -l < data/historical_data.csv) - 1))
        
        if [ $TRAINING_POINTS -lt 10 ]; then
          echo "üìä Adjusting model parameters for limited data ($TRAINING_POINTS points)"
          HIDDEN_SIZE=16
          SEQUENCE_LENGTH=3
          LEARNING_RATE=0.005
        elif [ $TRAINING_POINTS -lt 20 ]; then
          echo "üìä Using conservative model parameters for moderate data ($TRAINING_POINTS points)"
          HIDDEN_SIZE=24
          SEQUENCE_LENGTH=4
          LEARNING_RATE=0.008
        else
          echo "üìä Using standard model parameters for sufficient data ($TRAINING_POINTS points)"
          HIDDEN_SIZE=32
          SEQUENCE_LENGTH=5
          LEARNING_RATE=0.01
        fi
        
        echo "üîß Training parameters:"
        echo "  - Epochs: $EPOCHS"
        echo "  - Hidden size: $HIDDEN_SIZE"  
        echo "  - Sequence length: $SEQUENCE_LENGTH"
        echo "  - Learning rate: $LEARNING_RATE"
        echo "  - Training points: $TRAINING_POINTS"
        echo ""
        
        # Ensure output directory exists
        mkdir -p models
        
        # Train the model (using adaptive parameters)
        echo "‚ñ∂Ô∏è  Starting model training..."
        if ./bin/train \
          --data data/historical_data.csv \
          --epochs $EPOCHS \
          --output $OUTPUT_MODEL \
          --hidden $HIDDEN_SIZE \
          --sequence $SEQUENCE_LENGTH \
          --learning-rate $LEARNING_RATE; then
          
          echo "‚úÖ Training completed successfully"
          
          # Verify model file was created
          if [ -f "$OUTPUT_MODEL" ]; then
            echo "üìÅ Model saved as: $OUTPUT_MODEL"
            echo "üìä Model file size: $(ls -lh $OUTPUT_MODEL | awk '{print $5}')"
            echo "üîß Model parameters: Hidden=$HIDDEN_SIZE, Sequence=$SEQUENCE_LENGTH, LR=$LEARNING_RATE"
          else
            echo "‚ùå Error: Model file was not created despite successful training"
            exit 1
          fi
        else
          echo "‚ùå Training failed with exit code $?"
          echo "üìä Training diagnostics:"
          echo "  - Data file: $(ls -lh data/historical_data.csv 2>/dev/null || echo 'Missing')"
          echo "  - Training executable: $(ls -lh bin/train 2>/dev/null || echo 'Missing')"
          echo "  - Available memory: $(free -h 2>/dev/null | head -2 || echo 'Unknown')"
          echo "  - Disk space: $(df -h . | tail -1)"
          
          # Show sample data for debugging
          echo "üìÑ Sample training data (first 3 lines):"
          head -n 3 data/historical_data.csv || echo "Cannot read data file"
          
          exit 1
        fi
        
        # Show all models for debugging
        echo ""
        echo "üìÇ All model files:"
        ls -la models/ || echo "No models directory"
    
    - name: Test prediction accuracy
      run: |
        echo "üéØ Testing prediction accuracy..."
        
        # Use the standard model name
        TRAINED_MODEL="models/weather_model.bin"
        
        if [ ! -f "$TRAINED_MODEL" ]; then
          echo "‚ùå Error: Trained model not found at $TRAINED_MODEL"
          exit 1
        fi
        
        echo "Using model: $TRAINED_MODEL"
        echo "Model size: $(ls -lh $TRAINED_MODEL | awk '{print $5}')"
        
        # Check how much recent data we have
        RECENT_POINTS=$(($(wc -l < data/recent_weather.csv) - 1))
        echo "Recent data points available: $RECENT_POINTS"
        
        # If recent data is insufficient, supplement with historical data
        if [ $RECENT_POINTS -lt 5 ]; then
          echo "‚ö†Ô∏è  Recent data insufficient for prediction (need 5, have $RECENT_POINTS)"
          echo "üìä Creating input sequence from historical data..."
          
          # Create a prediction input with 5 points from historical data
          # Don't include any recent data in the input - that would be the target
          head -n 1 data/historical_data.csv > data/prediction_input.csv
          tail -n 5 data/historical_data.csv >> data/prediction_input.csv
          
          # Verify we have enough data now
          COMBINED_POINTS=$(($(wc -l < data/prediction_input.csv) - 1))
          echo "Historical input sequence has $COMBINED_POINTS data points"
          
          if [ $COMBINED_POINTS -ge 5 ]; then
            INPUT_FILE="data/prediction_input.csv"
            echo "‚úÖ Using historical data sequence for prediction"
          else
            echo "‚ùå Still insufficient historical data ($COMBINED_POINTS points)"
            exit 1
          fi
        else
          # We have enough recent data, but we need to be careful not to include the target
          echo "‚úÖ Using recent data for prediction input (excluding most recent as target)"
          
          # Create input sequence from recent data, excluding the very last point
          head -n 1 data/recent_weather.csv > data/prediction_input.csv
          # Take all but the last point as input sequence
          tail -n +2 data/recent_weather.csv | head -n -1 >> data/prediction_input.csv
          
          INPUT_FILE="data/prediction_input.csv"
          
          INPUT_POINTS=$(($(wc -l < data/prediction_input.csv) - 1))
          echo "üìä Created input sequence with $INPUT_POINTS points (recent data minus target)"
        fi
        
        # Make prediction using the prepared input data
        ./bin/predict \
          --model $TRAINED_MODEL \
          --input $INPUT_FILE \
          --output data/prediction.csv
        
        echo "‚úÖ Prediction completed successfully"
        
        # Check if prediction file was created
        if [ -f "data/prediction.csv" ]; then
          echo "üìÑ Prediction file created successfully"
          echo "Prediction results:"
          cat data/prediction.csv
        else
          echo "‚ö†Ô∏è  Warning: Prediction file not created"
        fi
    
    - name: Performance test
      run: |
        echo "‚ö° Running performance tests..."
        
        # Use the standard model name
        MAIN_MODEL="models/weather_model.bin"
        
        # Test training speed with small model
        echo "Testing training performance..."
        time ./bin/train \
          --data data/historical_data.csv \
          --epochs 5 \
          --output models/perf_test_model.bin \
          --hidden 16 \
          --sequence 3
        
        # Test prediction speed with main model
        if [ -f "$MAIN_MODEL" ]; then
          echo "Testing prediction performance with $MAIN_MODEL..."
          
          # Check if we have enough recent data, if not use historical data
          RECENT_POINTS=$(($(wc -l < data/recent_weather.csv) - 1))
          if [ $RECENT_POINTS -ge 5 ]; then
            PERF_INPUT="data/recent_weather.csv"
          else
            echo "‚ö†Ô∏è  Using historical data for performance test (recent data insufficient)"
            PERF_INPUT="data/historical_data.csv"
          fi
          
          time ./bin/predict \
            --model $MAIN_MODEL \
            --input $PERF_INPUT
        else
          echo "‚ö†Ô∏è  Warning: Main model not found for prediction performance test"
        fi
    
    - name: Validate model accuracy
      run: |
        echo "üìä Validating model accuracy..."
        
        # Use the standard model name
        TRAINED_MODEL="models/weather_model.bin"
        
        if [ ! -f "$TRAINED_MODEL" ]; then
          echo "‚ùå Error: Trained model not found at $TRAINED_MODEL"
          exit 1
        fi
        
        echo "Testing accuracy with model: $TRAINED_MODEL"
        
        # Check if we have enough recent data for sequence testing
        RECENT_POINTS=$(($(wc -l < data/recent_weather.csv) - 1))
        
        if [ $RECENT_POINTS -ge 6 ]; then
          echo "Using recent weather data for accuracy test ($RECENT_POINTS points)"
          
          # We need at least 6 points to create a proper test:
          # - Last point is the target (what we want to predict)
          # - Previous 5 points are the input sequence
          
          # Get the last 6 points from recent data
          tail -n 6 data/recent_weather.csv > data/temp_sequence.csv
          
          # Create input sequence: header + first 5 data points (excluding the last one)
          head -n 1 data/recent_weather.csv > data/test_input.csv
          head -n 5 data/temp_sequence.csv >> data/test_input.csv
          
          # Save the actual target value (the 6th/last point) for comparison
          head -n 1 data/recent_weather.csv > data/actual_value.csv
          tail -n 1 data/temp_sequence.csv >> data/actual_value.csv
          
          echo "üìä Created input sequence with 5 points, target is the 6th point"
        else
          echo "Using combined data for accuracy test (recent data insufficient: $RECENT_POINTS points)"
          
          # Create a longer sequence from historical + recent data
          # Take enough points to have a 5-point input sequence + 1 target
          head -n 1 data/historical_data.csv > data/test_input.csv
          
          if [ $RECENT_POINTS -gt 0 ]; then
            # Take last 5 points from historical, recent data becomes target
            tail -n 5 data/historical_data.csv >> data/test_input.csv
            
            # Use the most recent point as target
            head -n 1 data/recent_weather.csv > data/actual_value.csv
            tail -n 1 data/recent_weather.csv >> data/actual_value.csv
            
            echo "üìä Created input sequence from historical data, recent data as target"
          else
            # All from historical data: last 6 points, split into 5 input + 1 target
            tail -n 6 data/historical_data.csv > data/temp_sequence.csv
            head -n 5 data/temp_sequence.csv >> data/test_input.csv
            
            # Last historical point becomes target
            head -n 1 data/historical_data.csv > data/actual_value.csv
            tail -n 1 data/temp_sequence.csv >> data/actual_value.csv
            
            echo "üìä Created input sequence and target from historical data"
          fi
          
          # Verify we have enough data
          TEST_POINTS=$(($(wc -l < data/test_input.csv) - 1))
          if [ $TEST_POINTS -lt 5 ]; then
            echo "‚ö†Ô∏è  Still insufficient data for proper accuracy test ($TEST_POINTS points)"
            echo "üìù Using available data with warning about limited sequence length"
          fi
        fi
        
        # Clean up temporary files
        rm -f data/temp_sequence.csv
        
        # Make prediction using the test data
        echo "Making prediction for accuracy test..."
        ./bin/predict \
          --model $TRAINED_MODEL \
          --input data/test_input.csv \
          --output data/accuracy_test.csv
        
        echo "‚úÖ Accuracy test completed successfully"
        
        # Show prediction results and calculate accuracy
        if [ -f "data/accuracy_test.csv" ]; then
          echo "üìà Accuracy test prediction:"
          cat data/accuracy_test.csv
          
          # Extract predicted and actual temperature values for comparison
          if [ -f "data/actual_value.csv" ]; then
            echo ""
            echo "üéØ Accuracy Analysis:"
            echo "==================="
            echo "üìù Model was given an input sequence and asked to predict the next weather point."
            echo "üìù The 'actual' value below was NOT provided to the model - it's the true target."
            echo ""
            
            # Get predicted temperature (skip header, get first data value)
            PREDICTED_TEMP=$(tail -n +2 data/accuracy_test.csv | head -n 1 | cut -d',' -f1 2>/dev/null || echo "0")
            
            # Get actual temperature from the target data point (NOT from input sequence)
            ACTUAL_TEMP=$(tail -n 1 data/actual_value.csv | cut -d',' -f1 2>/dev/null || echo "0")
            
            echo "Predicted Temperature: ${PREDICTED_TEMP}¬∞F"
            echo "Actual Temperature:    ${ACTUAL_TEMP}¬∞F"
            
            # Calculate simple accuracy metrics using bc for floating point math
            if command -v bc >/dev/null 2>&1 && [ "$PREDICTED_TEMP" != "0" ] && [ "$ACTUAL_TEMP" != "0" ]; then
              # Calculate absolute error
              ABS_ERROR=$(echo "if ($PREDICTED_TEMP > $ACTUAL_TEMP) $PREDICTED_TEMP - $ACTUAL_TEMP else $ACTUAL_TEMP - $PREDICTED_TEMP" | bc -l)
              
              # Calculate relative error percentage
              REL_ERROR=$(echo "scale=2; ($ABS_ERROR / $ACTUAL_TEMP) * 100" | bc -l)
              
              # Calculate accuracy percentage (100 - relative error, min 0)
              ACCURACY=$(echo "scale=2; if (100 - $REL_ERROR < 0) 0 else 100 - $REL_ERROR" | bc -l)
              
              echo "Absolute Error:        ${ABS_ERROR}¬∞F"
              echo "Relative Error:        ${REL_ERROR}%"
              echo "Accuracy:              ${ACCURACY}%"
              
              # Provide accuracy assessment using integer comparison
              ABS_ERROR_INT=$(echo "$ABS_ERROR" | cut -d'.' -f1)
              if [ "${ABS_ERROR_INT:-999}" -le 2 ]; then
                echo "Assessment:            üéØ EXCELLENT (within 2¬∞F)"
              elif [ "${ABS_ERROR_INT:-999}" -le 5 ]; then
                echo "Assessment:            ‚úÖ GOOD (within 5¬∞F)"
              elif [ "${ABS_ERROR_INT:-999}" -le 10 ]; then
                echo "Assessment:            ‚ö†Ô∏è  FAIR (within 10¬∞F)"
              else
                echo "Assessment:            ‚ùå POOR (>10¬∞F difference)"
              fi
            else
              echo "‚ö†Ô∏è  Could not calculate detailed accuracy metrics (bc not available or invalid values)"
              echo "Manual comparison: Predicted=${PREDICTED_TEMP}¬∞F vs Actual=${ACTUAL_TEMP}¬∞F"
            fi
            
            echo ""
            echo "üìä Raw Data Comparison:"
            echo "----------------------"
            echo "Target value (what model was asked to predict):"
            cat data/actual_value.csv
            echo ""
            echo "Input sequence (what model was given to make prediction):"
            echo "Last 3 rows of input data:"
            tail -n 3 data/test_input.csv
            echo ""
            echo "‚úÖ Proper data separation: Target was NOT included in input sequence"
          fi
        fi
    
    - name: Pre-artifact diagnostics
      if: always()
      run: |
        echo "üîç Pre-artifact diagnostics..."
        echo "Current working directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la .
        echo ""
        echo "Checking for expected directories and files:"
        
        # Check each expected location
        for dir in data models bin; do
          if [ -d "$dir" ]; then
            echo "‚úÖ $dir/ exists:"
            ls -la "$dir/" | head -10
          else
            echo "‚ùå $dir/ missing"
          fi
          echo ""
        done
        
        # Check specific files that should exist
        echo "Checking for specific expected files:"
        for file in bin/train bin/predict data/historical_data.csv; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists ($(ls -lh $file | awk '{print $5}'))"
          else
            echo "‚ùå $file missing"
          fi
        done
        
        # Check if the working directory is correct
        echo ""
        echo "Weather LSTM project structure check:"
        if [ -f "Makefile" ]; then
          echo "‚úÖ Makefile found - in correct directory"
        else
          echo "‚ùå Makefile not found - might be in wrong directory"
          echo "Looking for weather-lstm subdirectory..."
          if [ -d "weather-lstm" ]; then
            echo "‚úÖ Found weather-lstm/ subdirectory"
            echo "Contents:"
            ls -la weather-lstm/ | head -10
          else
            echo "‚ùå No weather-lstm/ subdirectory found"
          fi
        fi
        
        # Memory and disk space check
        echo ""
        echo "System resources:"
        echo "Memory: $(free -h 2>/dev/null | head -2 || echo 'N/A')"
        echo "Disk space: $(df -h . | tail -1)"
    
    - name: Prepare artifacts for upload
      if: always()
      run: |
        echo "üì¶ Preparing artifacts for upload..."
        
        # Create artifact directory structure with full paths
        mkdir -p artifacts/models artifacts/data artifacts/bin
        
        # Verify artifact directory was created
        if [ ! -d "artifacts" ]; then
          echo "‚ùå Failed to create artifacts directory"
          exit 1
        fi
        
        echo "‚úÖ Artifact directory structure created"
        ls -la artifacts/
        
        # Copy existing files to artifact directory, checking for existence
        FILES_FOUND=0
        
        # Check and copy model files
        echo "üîç Checking for model files..."
        for model_file in models/weather_model.bin models/perf_test_model.bin; do
          if [ -f "$model_file" ]; then
            cp "$model_file" "artifacts/$model_file"
            echo "‚úÖ Added: $model_file ($(ls -lh $model_file | awk '{print $5}'))"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "‚ö†Ô∏è  Missing: $model_file"
          fi
        done
        
        # Check and copy data files
        echo "üîç Checking for data files..."
        for data_file in data/historical_data.csv data/recent_weather.csv data/prediction.csv data/accuracy_test.csv; do
          if [ -f "$data_file" ]; then
            cp "$data_file" "artifacts/$data_file"
            echo "‚úÖ Added: $data_file ($(wc -l < $data_file) lines)"
            FILES_FOUND=$((FILES_FOUND + 1))
          else
            echo "‚ö†Ô∏è  Missing: $data_file"
          fi
        done
        
        # Check and copy binaries
        echo "üîç Checking for binary files..."
        if [ -d "bin" ] && [ "$(ls -A bin 2>/dev/null)" ]; then
          cp bin/* artifacts/bin/ 2>/dev/null || true
          BIN_COUNT=$(ls bin/ 2>/dev/null | wc -l)
          echo "‚úÖ Added: bin/ ($BIN_COUNT executables)"
          FILES_FOUND=$((FILES_FOUND + 1))
        else
          echo "‚ö†Ô∏è  Missing: bin/ directory or empty"
        fi
        
        # Always create a manifest file (this ensures we have at least one file)
        echo "üìù Creating artifact manifest..."
        echo "# Weather LSTM Artifact Manifest" > artifacts/MANIFEST.txt
        echo "Generated: $(date)" >> artifacts/MANIFEST.txt
        echo "Workflow: ${{ github.workflow }}" >> artifacts/MANIFEST.txt
        echo "Run ID: ${{ github.run_id }}" >> artifacts/MANIFEST.txt
        echo "Commit: ${{ github.sha }}" >> artifacts/MANIFEST.txt
        echo "Branch: ${{ github.ref_name }}" >> artifacts/MANIFEST.txt
        echo "Triggered by: ${{ github.event_name }}" >> artifacts/MANIFEST.txt
        echo "" >> artifacts/MANIFEST.txt
        echo "Files included in this artifact:" >> artifacts/MANIFEST.txt
        find artifacts -type f | sort >> artifacts/MANIFEST.txt
        echo "" >> artifacts/MANIFEST.txt
        echo "Artifact Statistics:" >> artifacts/MANIFEST.txt
        echo "Total files: $(find artifacts -type f | wc -l)" >> artifacts/MANIFEST.txt
        echo "Total size: $(du -sh artifacts | cut -f1)" >> artifacts/MANIFEST.txt
        echo "" >> artifacts/MANIFEST.txt
        echo "Step Results:" >> artifacts/MANIFEST.txt
        echo "Binaries:" >> artifacts/MANIFEST.txt
        ls -la bin/ 2>/dev/null | head -5 >> artifacts/MANIFEST.txt || echo "No binaries found" >> artifacts/MANIFEST.txt
        echo "Models:" >> artifacts/MANIFEST.txt
        ls -la models/ 2>/dev/null | head -5 >> artifacts/MANIFEST.txt || echo "No models found" >> artifacts/MANIFEST.txt
        echo "Data files:" >> artifacts/MANIFEST.txt
        ls -la data/ 2>/dev/null | head -5 >> artifacts/MANIFEST.txt || echo "No data files found" >> artifacts/MANIFEST.txt
        
        # Always increment FILES_FOUND for the manifest
        FILES_FOUND=$((FILES_FOUND + 1))
        
        echo ""
        echo "üìä Artifact Summary:"
        echo "Files found and copied: $FILES_FOUND"
        
        # Debug: Show current working directory and files
        echo ""
        echo "üîç Debug Information:"
        echo "Current directory: $(pwd)"
        echo "Available files in workspace:"
        ls -la . | head -10
        echo ""
        echo "Available data files:"
        ls -la data/ 2>/dev/null || echo "No data directory"
        echo ""
        echo "Available model files:"
        ls -la models/ 2>/dev/null || echo "No models directory"  
        echo ""
        echo "Available binary files:"
        ls -la bin/ 2>/dev/null || echo "No bin directory"
        
        # Verify artifacts directory has content
        ARTIFACT_FILE_COUNT=$(find artifacts -type f | wc -l)
        echo ""
        echo "Artifact files created: $ARTIFACT_FILE_COUNT"
        
        if [ $ARTIFACT_FILE_COUNT -eq 0 ]; then
          echo "‚ùå No files in artifacts directory - creating minimal artifact"
          echo "Workflow run completed but no output files were generated" > artifacts/empty_run.txt
          ARTIFACT_FILE_COUNT=1
        fi
        
        echo "Total artifact size: $(du -sh artifacts | cut -f1)"
        
        # List all files in the artifact
        echo ""
        echo "üìÅ Final artifact contents:"
        find artifacts -type f -exec ls -lh {} \; | sort -k9
        
        # Verify the directory exists and is not empty before upload
        if [ -d "artifacts" ] && [ $ARTIFACT_FILE_COUNT -gt 0 ]; then
          echo "‚úÖ Artifacts ready for upload"
          echo "files_found=$FILES_FOUND" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Artifacts directory is empty or missing"
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: weather-lstm-artifacts
        path: weather-lstm/artifacts/*
        retention-days: 30
        if-no-files-found: warn
    
    - name: Summary
      if: always()
      run: |
        echo "============================================="
        echo "      Weather LSTM CI/CD Summary"
        echo "============================================="
        echo "Run ID: ${{ github.run_id }}"
        echo "Commit: ${{ github.sha }}"
        echo "Workflow triggered: ${{ github.event_name }}"
        echo ""
        
        # Check status of each major step
        echo "üìã Step Status:"
        
        # Check build status
        if [ -f "bin/train" ] && [ -f "bin/predict" ]; then
          echo "‚úÖ Build: Successful"
          BUILD_STATUS="‚úÖ"
        else
          echo "‚ùå Build: Failed"
          BUILD_STATUS="‚ùå"
        fi
        
        # Check data fetch status  
        if [ -f "data/historical_data.csv" ] && [ -s "data/historical_data.csv" ]; then
          TRAINING_POINTS=$(($(wc -l < data/historical_data.csv) - 1))
          echo "‚úÖ Data Fetch: Successful ($TRAINING_POINTS training points)"
          DATA_STATUS="‚úÖ"
        else
          echo "‚ùå Data Fetch: Failed"
          DATA_STATUS="‚ùå"
        fi
        
        # Check training status
        if [ -f "models/weather_model.bin" ] && [ -s "models/weather_model.bin" ]; then
          MODEL_SIZE=$(ls -lh models/weather_model.bin | awk '{print $5}')
          echo "‚úÖ Training: Successful (model: $MODEL_SIZE)"
          TRAINING_STATUS="‚úÖ"
        else
          echo "‚ùå Training: Failed"
          TRAINING_STATUS="‚ùå"
        fi
        
        # Check prediction status
        if [ -f "data/prediction.csv" ]; then
          echo "‚úÖ Prediction: Successful"
          PREDICTION_STATUS="‚úÖ"
        else
          echo "‚ö†Ô∏è  Prediction: Skipped or Failed"
          PREDICTION_STATUS="‚ö†Ô∏è"
        fi
        
        # Check accuracy test status
        if [ -f "data/accuracy_test.csv" ]; then
          echo "‚úÖ Accuracy Test: Successful"
          ACCURACY_STATUS="‚úÖ"
        else
          echo "‚ö†Ô∏è  Accuracy Test: Skipped or Failed"
          ACCURACY_STATUS="‚ö†Ô∏è"
        fi
        
        echo ""
        echo "üìÅ Generated Files:"
        echo "-------------------"
        
        # Model files
        echo "Models:"
        if [ -d "models" ] && [ "$(ls -A models 2>/dev/null)" ]; then
          ls -lah models/
        else
          echo "  No model files generated"
        fi
        
        echo ""
        echo "Data files:"
        if [ -d "data" ] && [ "$(ls -A data 2>/dev/null)" ]; then
          ls -lah data/
        else
          echo "  No data files generated"
        fi
        
        echo ""
        echo "üìä Training Summary:"
        echo "-------------------"
        if [ -f "data/historical_data.csv" ]; then
          TRAINING_POINTS=$(($(wc -l < data/historical_data.csv) - 1))
          echo "Training data points: $TRAINING_POINTS"
        fi
        
        if [ -f "data/recent_weather.csv" ]; then
          RECENT_POINTS=$(($(wc -l < data/recent_weather.csv) - 1))
          echo "Recent data points: $RECENT_POINTS"
        fi
        
        # Show prediction results if available
        if [ -f "data/prediction.csv" ]; then
          echo ""
          echo "üéØ Latest Prediction:"
          echo "--------------------"
          cat data/prediction.csv 2>/dev/null || echo "Could not read prediction"
        fi
        
        # Overall status
        echo ""
        echo "üéØ Overall Pipeline Status:"
        echo "---------------------------"
        if [ "$BUILD_STATUS" = "‚úÖ" ] && [ "$DATA_STATUS" = "‚úÖ" ] && [ "$TRAINING_STATUS" = "‚úÖ" ]; then
          echo "ÔøΩ SUCCESS: Core pipeline completed successfully!"
          echo "   Next run will download and continue from the current model"
          echo "   Model continuity: Each run builds upon previous training"
        elif [ "$BUILD_STATUS" = "‚úÖ" ] && [ "$DATA_STATUS" = "‚úÖ" ]; then
          echo "‚ö†Ô∏è  PARTIAL: Build and data fetch successful, but training failed"
          echo "   Check training logs for model parameter or data issues"
        elif [ "$BUILD_STATUS" = "‚úÖ" ]; then
          echo "‚ùå FAILED: Build successful, but data fetch failed"
          echo "   Check NOAA API connectivity and station availability"
        else
          echo "‚ùå FAILED: Build failed - check compilation errors"
        fi
        
        echo ""
        echo "============================================="
